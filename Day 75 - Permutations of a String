class Solution {
    public ArrayList<String> findPermutation(String s) {
        // Code here
        ArrayList<String> result = new ArrayList<>();
        if (s == null || s.length() == 0) {
            return result;
        }
        
        char[] letters = s.toCharArray();
        Arrays.sort(letters);
        boolean[] visited = new boolean[s.length()];
        StringBuilder current = new StringBuilder();
        
        backtrack(letters, visited, current, result);
        return result;
    }
    
    private void backtrack(char[] letters, boolean[] visited, StringBuilder current, ArrayList<String> result) {
        if (current.length() == letters.length) {
            result.add(current.toString());
            return;
        }
        
        for (int i = 0; i < letters.length; i++) {
            if (visited[i] || (i > 0 && letters[i] == letters[i - 1] && !visited[i - 1])) {
                continue;
            }
            visited[i] = true;
            current.append(letters[i]);
            backtrack(letters, visited, current, result);
            current.deleteCharAt(current.length() - 1);
            visited[i] = false;
        }
        
    }
}
