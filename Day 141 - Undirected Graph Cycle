class Solution {
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        List<Integer> [] adj = construct(V, edges);
        boolean[] visited = new boolean[V];
        
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (bfs(i, adj, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public List<Integer>[] construct(int V, int[][] edges) {
        List<Integer>[] adj = new ArrayList[V];
        
        for (int i = 0; i < V; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            adj[u].add(v);
            adj[v].add(u);
        }
        return adj;
    }
    
    public boolean bfs(int start, List<Integer>[] adj, boolean[] visited) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{start, -1});
        visited[start] = true;
        
        while (!queue.isEmpty()) {
            int[] front = queue.poll();
            int node = front[0];
            int parent = front[1];
            
            for (int neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.offer(new int[]{neighbor, node});
                }
                else if (neighbor != parent) {
                    return true;
                }
            }
        }
        return false;
    }
}
