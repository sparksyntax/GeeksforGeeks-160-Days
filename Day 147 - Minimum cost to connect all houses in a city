class Solution {

    public int minCost(int[][] houses) {
        // code here
        int n = houses.length;
        
        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        boolean[] visited = new boolean[n];
        
        minHeap.offer(new int[]{0, 0});
        int total = 0;
        
        while (!minHeap.isEmpty()) {
            int[] current = minHeap.poll();
            int cost = current[0], u = current[1];
            
            if (visited[u]) continue;
            
            visited[u] = true;
            total += cost;
            
            for (int v = 0; v < n; v++) {
                if (!visited[v]) {
                    int distance = manhattanDistance(houses[u], houses[v]);
                    minHeap.offer(new int[]{distance, v});
                }
            }
        }
        return total;
    }
    
    public int manhattanDistance(int[] a, int[] b) {
        return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);
    }
}
