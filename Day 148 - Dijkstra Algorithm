class Solution {
    public int[] dijkstra(int V, int[][] edges, int src) {
        // code here
        ArrayList<ArrayList<ArrayList<Integer>>> adj = construct(edges, V);
        PriorityQueue<ArrayList<Integer>> pq = new PriorityQueue<>(
            Comparator.comparingInt(a -> a.get(0)));
            
        int[] distance = new int[V];
        Arrays.fill(distance, Integer.MAX_VALUE);
        
        distance[src] = 0;
        ArrayList<Integer> start = new ArrayList<>();
        
        start.add(0);
        start.add(src);
        pq.offer(start);
        
        while (!pq.isEmpty()) {
            ArrayList<Integer> current = pq.poll();
            int d = current.get(0), u = current.get(1);
            
            for (ArrayList<Integer> neighbor : adj.get(u)) {
                int v = neighbor.get(0);
                int weight = neighbor.get(1);
                
                if (distance[v] > distance[u] + weight) {
                    distance[v] = distance[u] + weight;
                    ArrayList<Integer> temp = new ArrayList<>();
                    temp.add(distance[v]);
                    temp.add(v);
                    pq.offer(temp);
                }
            }
        }
        return distance;
    }
    
    public ArrayList<ArrayList<ArrayList<Integer>>> construct(int[][] edges, int V) {
        ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<>();
        
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];
            
            ArrayList<Integer> e1 = new ArrayList<>();
            e1.add(v);
            e1.add(wt);
            adj.get(u).add(e1);
            
            ArrayList<Integer> e2 = new ArrayList<>();
            e2.add(u);
            e2.add(wt);
            adj.get(v).add(e2);
        }
        return adj;
    }
}
