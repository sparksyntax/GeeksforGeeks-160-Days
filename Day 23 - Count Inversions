class Solution {
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
        int n = arr.length;
        int[] temp = new int[n];
        return countInversion(arr, temp, 0, n - 1);
    }
    
    static int countInversion(int[] arr, int[] temp, int left, int right) {
        int inversionCount = 0;
        
        if (left < right) {
            int mid = (left + right) / 2;
            
            inversionCount += countInversion(arr, temp, left, mid);
            
            inversionCount += countInversion(arr, temp, mid + 1, right);
            
            inversionCount += mergeAndCount(arr, temp, left, mid, right);
        }
        return inversionCount;
    }
    
    static int mergeAndCount(int[] arr, int[] temp, int left, int mid, int right) {
        int i = left;
        int j = mid + 1;
        int k = left;
        int inversionCount = 0;
        
        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            }
            else {
                temp[k++] = arr[j++];
                inversionCount += (mid - i + 1);
            }
        }
        
        while (i <= mid) {
            temp[k++] = arr[i++];
        }
        
        while (j <= right) {
            temp[k++] = arr[j++];
        }
        
        for (i = left; i <= right; i++) {
            arr[i] = temp[i];
        }
        
        return inversionCount;
    }
}
